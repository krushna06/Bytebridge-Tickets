const { logAdminEvent } = require('../../../../../lib/logging.js');const { Colors } = require('discord.js');module.exports.get = fastify => ({	handler: async req => {				const client = req.routeOptions.config.client;		const id = req.params.guild;		const settings = await client.prisma.guild.findUnique({ where: { id } }) ??			await client.prisma.guild.create({ data: { id } });		return settings;	},	onRequest: [fastify.authenticate, fastify.isAdmin],});module.exports.patch = fastify => ({	handler: async req => {		const data = req.body;		if (Object.prototype.hasOwnProperty.call(data, 'id')) delete data.id;		if (Object.prototype.hasOwnProperty.call(data, 'createdAt')) delete data.createdAt;		const colours = ['errorColour', 'primaryColour', 'successColour'];		for (const c of colours) {			if (data[c] && !data[c].startsWith('#') && !(data[c] in Colors)) {				throw new Error(`${data[c]} is not a valid colour. Valid colours are HEX and: ${Object.keys(Colors).join(', ')}`);			}		}				const client = req.routeOptions.config.client;		const id = req.params.guild;		const original = await client.prisma.guild.findUnique({ where: { id } });		const settings = await client.prisma.guild.update({			data: data,			include: { categories: { select: { id: true } } },			where: { id },		});		for (const { id } of settings.categories) await client.tickets.getCategory(id, true);		delete settings.categories;		logAdminEvent(client, {			action: 'update',			diff: {				original,				updated: settings,			},			guildId: id,			target: {				id,				name: client.guilds.cache.get(id).name,				type: 'settings',			},			userId: req.user.id,		});		return settings;	},	onRequest: [fastify.authenticate, fastify.isAdmin],});