const { SlashCommand } = require('@eartharoid/dbf');const ExtendedEmbedBuilder = require('../../lib/embed');module.exports = class HelpSlashCommand extends SlashCommand {	constructor(client, options) {		const name = 'help';		super(client, {			...options,			description: client.i18n.getMessage(null, `commands.slash.${name}.description`),			descriptionLocalizations: client.i18n.getAllMessages(`commands.slash.${name}.description`),			dmPermission: false,			name,			nameLocalizations: client.i18n.getAllMessages(`commands.slash.${name}.name`),		});	}		async run(interaction) {		const { client } = interaction;		const settings = await client.prisma.guild.findUnique({ where: { id: interaction.guild.id } });		const getMessage = client.i18n.getLocale(settings.locale);		const commands = interaction.client.application.commands.cache			.sort((a, b) => a.name.localeCompare(b.name));		const commandCategories = {			general: ['help', 'new', 'tickets', 'tag'],			members: ['add', 'remove', 'transfer'],			notes: ['note', 'stickynotes', 'viewnotes'],			staff: ['claim', 'release', 'force-close', 'move', 'priority'],			stats: ['leaderboard', 'stats', 'viewprofile', 'setprofile'],			ticket: ['close', 'topic', 'rename', 'transcript'],		};		const embed = new ExtendedEmbedBuilder()			.setColor(settings.primaryColour)			.setTitle(getMessage('commands.slash.help.response.commands'))			.setDescription(getMessage('commands.slash.help.response.description', { command: '</new:' + commands.find(cmd => cmd.name === 'new')?.id + '>' }));		for (const [category, commandList] of Object.entries(commandCategories)) {			const categoryCommands = commands				.filter(cmd => commandList.includes(cmd.name))				.map(cmd => `> </${cmd.name}:${cmd.id}>: ${cmd.description}`)				.join('\n');			if (categoryCommands) {				embed.addFields({					name: category.charAt(0).toUpperCase() + category.slice(1),					value: categoryCommands,				});			}		}		return interaction.reply({ embeds: [embed] });	}};