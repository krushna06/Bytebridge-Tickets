const { PermissionsBitField } = require('discord.js');module.exports.getCommonGuilds = (client, userId) => client.guilds.cache.filter(guild => guild.members.cache.has(userId));const updateStaffRoles = async guild => {	const { categories } = await guild.client.prisma.guild.findUnique({		select: { categories: { select: { staffRoles: true } } },		where: { id: guild.id },	});	const staffRoles = [		...new Set(			categories.reduce((acc, c) => {				acc.push(...c.staffRoles);				return acc;			}, []),		),	];	await guild.client.keyv.set(`cache/guild-staff:${guild.id}`, staffRoles);	return staffRoles;};module.exports.updateStaffRoles = updateStaffRoles;module.exports.isStaff = async (guild, userId) => {		const client = guild.client;	if (client.supers.includes(userId)) return true;	try {		const guildMember = guild.members.cache.get(userId) || await guild.members.fetch(userId);		if (guildMember.permissions.has(PermissionsBitField.Flags.ManageGuild)) return true;		const staffRoles = await client.keyv.get(`cache/guild-staff:${guild.id}`) || await updateStaffRoles(guild);		return staffRoles.some(r => guildMember.roles.cache.has(r));	} catch {		return false;	}};module.exports.getPrivilegeLevel = async member => {	if (!member) return -1;	else if (member.guild.client.supers.includes(member.id)) return 4;	else if (member.guild.ownerId === member.id) return 3;	else if (member.permissions.has(PermissionsBitField.Flags.ManageGuild)) return 2;	else if (await this.isStaff(member.guild, member.id)) return 1;	else return 0;};